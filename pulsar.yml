- hosts: pulsarservers
  vars:
    # Golang
    golang_gopath: '/opt/workspace-go'

    # Singularity target version
    singularity_version: "3.7.4"
    singularity_go_path: "{{ golang_install_dir }}"

    # pbs-drmaa library version
    pbs_drmaa_version: "1.0.19"

    # Galaxy/Pulsar user setup
    galaxy_user:
      name: galaxyelixir
      uid:  2469
      shell: /bin/bash
      nfs_home: "brno11-elixir"

    pulsar_prefix: pulsar-re

    # Miniconda settings
    miniconda_prefix: "/storage/{{ galaxy_user.nfs_home }}/home/{{ galaxy_user.name }}/anaconda3"
    miniconda_version: 23.1.0
    miniconda_base_env_packages: ['mamba']
    miniconda_channels:
      - 'conda-forge'
      - 'bioconda'
      - 'iuc'
      - 'r'
      - 'anaconda'
      - 'petrnovak'
      - 'defaults'

  vars_files:
    - group_vars/secret.yml
  pre_tasks:
    - name: Install some packages
      package:
        name:
          - build-essential
          - git
          - python3-dev
          - libcurl4-openssl-dev
          - libssl-dev
          - virtualenv
          - libgnutls28-dev
          - squashfs-tools # DEMON: needed by singularity roles
          - openpbs-client
          - libopenpbs-dev
          - tmpreaper
        state: present
        update_cache: yes
      become: yes
    - name: Comment out SHOWWARNING line in tmpreaper config
      ansible.builtin.lineinfile:
        path: /etc/tmpreaper.conf
        regexp: "SHOWWARNING="
        state: absent

    - name: Mount NFS volume to share job data with worker nodes
      ansible.posix.mount:
        src: "storage-{{ galaxy_user.nfs_home }}.metacentrum.cz:/"
        path: "/storage/{{ galaxy_user.nfs_home }}"
        opts: "sec=krb5i,proto=tcp,port=2049,intr"
        state: mounted
        fstype: nfs4
      become: yes

    - name: Add Galaxy/Pulsar user
      ansible.builtin.user:
        name: "{{ galaxy_user.name }}"
        comment: Galaxy/Pulsar user
        uid: "{{ galaxy_user.uid | default(omit) }}"
        group: "{{ galaxy_user.group | default(omit) }}"
        create_home: "{{ galaxy_user.create_home | default('true') }}"
        home: "{{ galaxy_user.home | default(omit) }}"
        shell: "{{ galaxy_user.shell | default(omit) }}"
        system: "{{ galaxy_user.system | default('false') }}"
        local: "{{ galaxy_user.local | default(omit) }}"

    - name: Check if keytab exists
      stat:
        path: "/home/{{ galaxy_user.name }}/{{ galaxy_user.name }}.keytab"
      register: keytab_exists
    - name: Copy galaxy user's keytab from home at skirit to home here
      ansible.builtin.shell:
        cmd: "scp {{ galaxy_user.name }}@skirit.metacentrum.cz:~/{{ galaxy_user.name }}.keytab /home/{{ galaxy_user.name }}/"
      become: yes
      become_user: "{{ galaxy_user.name }}"
      when: not keytab_exists.stat.exists

    - name: Creates env var BASH_ENV in crontab
      ansible.builtin.cron:
        name: BASH_ENV
        env: yes
        job: ~/.bashrc
      become: yes
      become_user: "{{ galaxy_user.name }}"
    - name: Creates env var SHELL in crontab
      ansible.builtin.cron:
        name: SHELL
        env: yes
        job: /bin/bash
        insertafter: BASH_ENV
      become: yes
      become_user: "{{ galaxy_user.name }}"
    - name: Creates entry in crontab "@reboot kinit META"
      ansible.builtin.cron:
        name: "kinit <galaxy_user>@META after reboot"
        special_time: reboot
        job: "KRB5CCNAME=/tmp/krb5cc_{{ galaxy_user.name }} kinit -k -t /home/{{ galaxy_user.name }}/{{ galaxy_user.name }}.keytab {{ galaxy_user.name }}@META"
      become: yes
      become_user: "{{ galaxy_user.name }}"
    - name: Creates entry in crontab "repeatedly kinit META"
      ansible.builtin.cron:
        name: "kinit <galaxy_user>@META repeatedly"
        minute: 1
        hour: "*/6"
        job: "KRB5CCNAME=/tmp/krb5cc_{{ galaxy_user.name }} kinit -k -t /home/{{ galaxy_user.name }}/{{ galaxy_user.name }}.keytab {{ galaxy_user.name }}@META"
      become: yes
      become_user: "{{ galaxy_user.name }}"

    - name: Download pbs-drmaa library
      ansible.builtin.get_url:
        url: "https://master.dl.sourceforge.net/project/pbspro-drmaa/pbs-drmaa/1.0/pbs-drmaa-{{ pbs_drmaa_version }}.tar.gz?viasf=1"
        dest: "/home/{{ galaxy_user.name }}/pbs-drmaa.tar.gz"
      become: yes
      become_user: "{{ galaxy_user.name }}"
    - name: Extract pbs-drmaa.tar.gz
      ansible.builtin.unarchive:
        src: "/home/{{ galaxy_user.name }}/pbs-drmaa.tar.gz"
        dest: "/home/{{ galaxy_user.name }}"
      become: yes
      become_user: "{{ galaxy_user.name }}"
    - name: Install pbs-drmaa library
      ansible.builtin.shell:
        cmd: "cd /home/{{ galaxy_user.name }}/pbs-drmaa-{{ pbs_drmaa_version }} && ./configure && make && make check"
      become: yes
      become_user: "{{ galaxy_user.name }}"
    - name: Create .drmaa folder in NFS home
      ansible.builtin.file:
        path: "/storage/{{ galaxy_user.nfs_home }}/home/{{ galaxy_user.name }}/.drmaa"
        state: directory
      become: yes
      become_user: "{{ galaxy_user.name }}"

    - name: Check for Miniconda existence
      stat:
        path: "{{ miniconda_prefix }}/bin/conda"
      register: miniconda_exists
      become: yes
      become_user: "{{ galaxy_user.name }}"
    - name: Download Miniconda installer
      ansible.builtin.get_url:
        url: "https://repo.anaconda.com/miniconda/Miniconda3-py39_{{ miniconda_version }}-1-Linux-x86_64.sh"
        dest: "/home/{{ galaxy_user.name }}/Miniconda3-py39_{{ miniconda_version }}-1-Linux-x86_64.sh"
      become: yes
      become_user: "{{ galaxy_user.name }}"
      when: not miniconda_exists.stat.exists
    - name: Install Miniconda to NFS home
      ansible.builtin.shell:
        cmd: "/bin/bash /home/{{ galaxy_user.name }}/Miniconda3-py39_{{ miniconda_version }}-1-Linux-x86_64.sh -b -p {{ miniconda_prefix }}"
      become: yes
      become_user: "{{ galaxy_user.name }}"
      when: not miniconda_exists.stat.exists
    - name: Ensure conda folder is executable
      ansible.builtin.file:
        path: "{{ miniconda_prefix }}/bin"
        state: directory
        recurse: yes
        mode: 'a+x'
      become: yes
      become_user: "{{ galaxy_user.name }}"
    - name: Check for mamba bin
      stat:
        path: "{{ miniconda_prefix }}/bin/mamba"
      register: mamba_exists
      become: yes
      become_user: "{{ galaxy_user.name }}"
    - name: Activate base env and install mamba
      ansible.builtin.command: "{{ miniconda_prefix }}/bin/conda install -y -c conda-forge mamba"
      become: yes
      become_user: "{{ galaxy_user.name }}"
      when: not mamba_exists.stat.exists
    - name: Ensure conda folder is executable again
      ansible.builtin.file:
        path: "{{ miniconda_prefix }}/bin"
        state: directory
        recurse: yes
        mode: 'a+x'
      become: yes
      become_user: "{{ galaxy_user.name }}"
      when: not mamba_exists.stat.exists

    - name: Create persistent files folder
      ansible.builtin.file:
        path: "{{ pulsar_persistence_dir }}"
        state: directory
        recurse: yes
        mode: 'a+x'
        owner: "{{ pulsar_user.name }}"

  roles:
    - gantsign.golang
    - cyverse-ansible.singularity
    - galaxyproject.pulsar

  post_tasks:
#    - name: copy dependency_resolvers_config into pulsar config folder
#      ansible.builtin.copy:
#        src: dependency_resolvers_conf.xml  
#        dest: "{{ pulsar_root }}/config/dependency_resolvers_conf.xml"
    - name: Create cleanup_jobs dir
      ansible.builtin.file:
        path: "{{ pulsar_cleanup_dir }}"
        state: directory
        recurse: yes
        mode: 'a+x'
      become: yes
      become_user: "{{ galaxy_user.name }}"      
    - name: Creates entry in crontab "tmpreaper call in staging dir"
      ansible.builtin.cron:
        name: "tmpreaper in staging dir"
        minute: "7"
        hour: "*/12" 
        job: "/usr/sbin/tmpreaper --verbose=0 --showdeleted --all --mtime --mtime-dir --runtime=600 {{ pulsar_cleanup_delay }} {{ pulsar_staging_dir }} >> {{ pulsar_cleanup_dir }}/cleaning_pulsar_files.log"
      become: yes
      become_user: "{{ galaxy_user.name }}"
