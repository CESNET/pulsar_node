- hosts: nometapuppet
  roles:
    - role: metacentrum.krbnfs
      become: yes

- hosts: pulsarservers
  vars:
    golang_gopath: '/opt/workspace-go'
    singularity_version: "3.7.4"
    singularity_go_path: "{{ golang_install_dir }}"
    pbs_drmaa_version: "1.0.19"

    # Miniconda settings
    miniconda_prefix: "{{ pulsar_network_homedir }}/conda"
    miniconda_version: 23.1.0
    miniconda_base_env_packages: ['mamba']
    miniconda_channels:
      - 'conda-forge'
      - 'bioconda'
      - 'iuc'
      - 'r'
      - 'anaconda'
      - 'petrnovak' # DEMON: this is pecific for RE Galaxy and pulsar-re but could be usefull also for usegalaxy.cz if using RE tools
      - 'defaults'

  vars_files:
    - group_vars/secret.yml
  pre_tasks:
    - group:
        name: "{{ galaxy_user.group }}"
        gid: "{{ galaxy_user.gid }}"
      become: yes
    - user:
        name: "{{ galaxy_user.name }}"
        uid: "{{ galaxy_user.uid }}"
        group: "{{ galaxy_user.group }}"
        shell: /bin/bash
      become: yes

    - name: Create pulsar root and persistent files folder
      ansible.builtin.file:
        path: "{{ pulsar_persistence_dir }}"
        state: directory
        recurse: yes
        #mode: 'a+x'
        owner: "{{ galaxy_user.name }}"
        group: "{{ galaxy_user.group }}"
      become: yes
        
    - name: Check for Miniconda existence
      stat:
        path: "{{ miniconda_prefix }}/bin/conda"
      register: miniconda_exists
      become: yes
      become_user: "{{ galaxy_user.name }}"
    - name: Download Miniconda installer
      ansible.builtin.get_url:
        url: "https://repo.anaconda.com/miniconda/Miniconda3-py39_{{ miniconda_version }}-1-Linux-x86_64.sh"
        dest: "/home/{{ galaxy_user.name }}/Miniconda3-py39_{{ miniconda_version }}-1-Linux-x86_64.sh"
      become: yes
      become_user: "{{ galaxy_user.name }}"
      when: not miniconda_exists.stat.exists
    - name: Install Miniconda to NFS home
      ansible.builtin.shell:
        cmd: "/bin/bash /home/{{ galaxy_user.name }}/Miniconda3-py39_{{ miniconda_version }}-1-Linux-x86_64.sh -b -p {{ miniconda_prefix }}"
      become: yes
      become_user: "{{ galaxy_user.name }}"
      when: not miniconda_exists.stat.exists
    - name: Ensure conda folder is executable
      ansible.builtin.file:
        path: "{{ miniconda_prefix }}/bin"
        state: directory
        recurse: yes
        mode: 'a+x'
      become: yes
      become_user: "{{ galaxy_user.name }}"
    - name: Check for mamba bin
      stat:
        path: "{{ miniconda_prefix }}/bin/mamba"
      register: mamba_exists
      become: yes
      become_user: "{{ galaxy_user.name }}"
    - name: Activate base env and install mamba
      ansible.builtin.command: "{{ miniconda_prefix }}/bin/conda install -y -c conda-forge mamba"
      become: yes
      become_user: "{{ galaxy_user.name }}"
      when: not mamba_exists.stat.exists
    - name: Ensure conda folder is executable again
      ansible.builtin.file:
        path: "{{ miniconda_prefix }}/bin"
        state: directory
        recurse: yes
        mode: 'a+x'
      become: yes
      become_user: "{{ galaxy_user.name }}"
      when: not mamba_exists.stat.exists

  roles:
    - role: metacentrum.pulsar
      become: yes
#    - gantsign.golang
#    - cyverse-ansible.singularity
    - role: galaxyproject.pulsar
      become: yes
      become_user: "{{ galaxy_user.name }}"

  post_tasks:
    ## DEMON: This task might be necessary to comment out for pulsar-re
    - name: copy dependency_resolvers_config into pulsar config folder
      ansible.builtin.copy:
        src: dependency_resolvers_conf.xml
        dest: "{{ pulsar_root }}/config/dependency_resolvers_conf.xml"
    - name: Create .drmaa folder in NFS home
      ansible.builtin.file:
        path: "{{ pulsar_network_homedir }}/.drmaa"
        state: directory
      become: yes
      become_user: "{{ galaxy_user.name }}"
    - name: Create cleanup_jobs dir
      ansible.builtin.file:
        path: "{{ pulsar_cleanup_dir }}"
        state: directory
        recurse: yes
        mode: 'a+x'
      become: yes
      become_user: "{{ galaxy_user.name }}"      
    - name: Creates entry in crontab "tmpreaper call in staging dir"
      ansible.builtin.cron:
        name: "tmpreaper in staging dir"
        minute: "7"
        hour: "*/6" 
        job: "/usr/sbin/tmpreaper --verbose=0 --showdeleted --all --mtime --mtime-dir --runtime=600 {{ pulsar_cleanup_delay }} {{ pulsar_staging_dir }} >> {{ pulsar_cleanup_dir }}/cleaning_pulsar_files.log"
      become: yes
      become_user: "{{ galaxy_user.name }}"
