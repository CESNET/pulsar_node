# Put your Galaxy server's fully qualified domain name (FQDN) (or the FQDN of the RabbitMQ server) above.
rabbitmq_hostname: "mq.galaxyproject.eu" # DEMON: Important to have proper FQDN of connected Galaxy server (or at least RabbitMQ server)
rabbitmq_vhost: "/pulsar/galaxy_cz01" # DEMON: must be the same rabbitmq vhost set for communication between Galaxy and Pulsar set on Galaxy side
rabbitmq_user: "galaxy_cz01" # DEMON: must be user running connected Galaxy server
rabbitmq_port: 5671 # DEMON: must be port where to contact RabbitMQ server

pulsar_root: /opt/pulsar
pulsar_package_version: "0.15.3"
pulsar_data_dir: /storage/praha5-elixir/home/galaxyeu/pulsar-eu
pulsar_staging_dir: "{{ pulsar_data_dir }}/files/staging"
#pulsar_staging_dir: "/storage/brno11-elixir/home/galaxyeu/galaxy-staging"
pulsar_persistence_dir: "{{ pulsar_data_dir }}/files/persistent"
pulsar_dependencies_dir: "{{ pulsar_data_dir }}/deps"
pulsar_separate_privileges: true

#miniconda_prefix: "/home/pulsar/conda_test"
#miniconda_version: 4.7.12
#miniconda_base_env_packages: ['mamba']
#miniconda_manage_dependencies: false
#miniconda_env:
#  name: root
#  channels:
#    - conda-forge
#  dependencies:
#    - mamba

#miniconda_prefix: "{{ pulsar_data_dir }}/conda"
miniconda_prefix: "/storage/praha5-elixir/home/galaxyeu/miniconda3"
conda_prefix: "{{ miniconda_prefix }}"
#conda_exec: "{{ conda_prefix }}/bin/conda"
conda_exec: "{{ conda_prefix }}/bin/mamba"
conda_channels:
  - "conda-forge"
  - "bioconda"
  - "iuc"
  - "r"
  - "anaconda"
  - "petrnovak" # DEMON: channel needed for RepeatExplorer Galaxy (comment out otherwise)
  - "defaults"

pulsar_pip_install: true
pulsar_pycurl_ssl_library: openssl
pulsar_systemd: true
pulsar_systemd_enabled: true
pulsar_systemd_runner: webless
pulsar_systemd_service_name: pulsar
pulsar_systemd_state: started
pulsar_systemd_memory_limit: 6
pulsar_systemd_environment:
  - DRMAA_LIBRARY_PATH="/home/galaxyeu/pbs-drmaa-1.0.19/pbs_drmaa/.libs/libdrmaa.so"

pulsar_create_user: false
pulsar_user:
  name: galaxyeu
  shell: /bin/bash
#pulsar_group: "{{ pulsar_user.name }}"

pulsar_optional_dependencies:
  - pyOpenSSL
  # For remote transfers initiated on the Pulsar end rather than the Galaxy end
  - pycurl
  # drmaa required if connecting to an external DRM using it.
  - drmaa
  # kombu needed if using a message queue
  - kombu
  # amqp 5.0.3 changes behaviour in an unexpected way, pin for now.
  - 'amqp==5.0.2'
  # psutil and pylockfile are optional dependencies but can make Pulsar
  # more robust in small ways.
  #- psutil
  #- pylockfile
  # DEMON: Not sure if this is really needed as we found out, that neither poster (for python 2.7) nor poster3 works
  #- poster3

pulsar_yaml_config:
  staging_directory: "{{ pulsar_staging_dir }}"
  persistence_directory: "{{ pulsar_persistence_dir }}"
  tool_dependency_dir: "{{ pulsar_dependencies_dir }}"
  # The following are the settings for the pulsar server to contact the message queue with related timeouts etc.
  message_queue_url: "pyamqp://{{ rabbitmq_user }}:{{ rabbitmq_password }}@{{ rabbitmq_hostname }}:{{ rabbitmq_port }}/{{ rabbitmq_vhost }}?ssl=1"
  min_polling_interval: 0.5
  amqp_publish_retry: True
  amqp_publish_retry_max_retries: 5
  amqp_publish_retry_interval_start: 10
  amqp_publish_retry_interval_step: 10
  amqp_publish_retry_interval_max: 60
  # We also need to create the dependency resolvers configuration so pulsar knows how to find and install dependencies
  # for the tools we ask it to run. The simplest method which covers 99% of the use cases is to use conda auto installs
  # similar to how Galaxy works.
  dependency_resolution:
    resolvers:
      - type: conda
        #auto_init: true
        auto_init: false
        auto_install: true
        ensure_channels: "{{ conda_channels|join(',') }}"
        exec: "{{ conda_exec }}"
        prefix: "{{ conda_prefix }}"
  container_resolvers: 
    - type: explicit_singularity
      cache_directory: "/storage/praha5-elixir/home/galaxyeu/singularity"
    - type: cached_mulled_singularity
      cache_directory: "/storage/praha5-elixir/home/galaxyeu/singularity"
    - type: mulled_singularity
      cache_directory: "/storage/praha5-elixir/home/galaxyeu/singularity"
  managers:
    _default_:
      type: queued_drmaa
    production:
      type: queued_cli
      job_plugin: Torque
      job_Resource_List: "select=1:ncpus=4:mem=16gb:scratch_local=50gb,walltime=23:59:59"
      job_destination: "galaxyeu@elixir-pbs.elixir-czech.cz"
      job_Variable_List: "TMP=$SCRATCHDIR,TEMP=$SCRATCHDIR,TMPDIR=$SCRATCHDIR,XDG_CACHE_HOME=$SCRATCHDIR,SINGULARITY_TMPDIR=/storage/praha5-elixir/home/galaxyeu/singularity/tmp,SINGULARITY_CACHEDIR=/storage/praha5-elixir/home/galaxyeu/singularity"
    gpu:
      type: queued_cli
      job_plugin: Torque
      job_Resource_List: "select=1:ncpus=12:mem=120gb:pbs_server=meta-pbs.metacentrum.cz:scratch_local=100gb:ngpus=1:gpu_mem=8gb,walltime=12:00:00"
      job_destination: "gpu@meta-pbs.metacentrum.cz"
      job_Variable_List: "TMP=$SCRATCHDIR,TEMP=$SCRATCHDIR,TMPDIR=$SCRATCHDIR,XDG_CACHE_HOME=$SCRATCHDIR,SINGULARITY_TMPDIR=/storage/praha5-elixir/home/galaxyeu/singularity/tmp,SINGULARITY_CACHEDIR=/storage/praha5-elixir/home/galaxyeu/singularity,ALPHAFOLD_DB=/storage/brno11-elixir/projects/alphafold/alphafold.db-2.3.1,ALPHAFOLD_USE_GPU=True"
      #job_Variable_List: "TMP=$SCRATCHDIR,TEMP=$SCRATCHDIR,TMPDIR=$SCRATCHDIR,XDG_CACHE_HOME=$SCRATCHDIR,SINGULARITY_TMPDIR=/storage/praha5-elixir/home/galaxyeu/singularity/tmp,SINGULARITY_CACHEDIR=/storage/praha5-elixir/home/galaxyeu/singularity,ALPHAFOLD_DB=/storage/brno11-elixir/projects/alphafold/alphafold.db-2.2/,ALPHAFOLD_USE_GPU=True"

# Pulsar should use the same job metrics plugins as Galaxy. This will automatically set `job_metrics_config_file` in
# `pulsar_yaml_config` and create `{{ pulsar_config_dir }}/job_metrics_conf.yml`.
#pulsar_job_metrics_plugins: "{{ galaxy_job_metrics_plugins }}"
