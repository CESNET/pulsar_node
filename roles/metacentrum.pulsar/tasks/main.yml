- name: Install required standard packages
  package:
    name:
      - acl
      - build-essential
      - git
      - python3-dev
      - libcurl4-openssl-dev
      - libssl-dev
      - virtualenv
      - libgnutls28-dev
      - squashfs-tools # DEMON: needed by singularity roles
      - rsync
      - tmpreaper
    state: present
    update_cache: yes

- name: Comment out SHOWWARNING line in tmpreaper config
  ansible.builtin.lineinfile:
    path: /etc/tmpreaper.conf
    regexp: "SHOWWARNING="
    state: absent

- name: Download DRMAA
  get_url:
    url: https://master.dl.sourceforge.net/project/pbspro-drmaa/pbs-drmaa/1.0/pbs-drmaa-{{ drmaa_version }}.tar.gz?viasf=1
    dest: /tmp/pbs-drmaa-{{ drmaa_version }}.tar.gz

- name: Install DRMAA
  shell: |
    cd /tmp
    rm -rf pbs-drmaa-{{ drmaa_version }}
    tar xzf pbs-drmaa-{{ drmaa_version }}.tar.gz
    cd pbs-drmaa-{{ drmaa_version }}
    ./configure --prefix /opt/drmaa
    make && make install

- name: KRB5 user keytab
  copy:
    content: "{{ krb5_user_keytab }}"
    dest: "/home/{{ pulsar.user_name }}/user.keytab"

- name: KRB5 user ticket
  command: "kinit -k -t /home/{{ pulsar.user_name }}/user.keytab {{ pulsar.user_name }}@META"
  become: yes
  become_user: '{{ pulsar.user_name }}'

- name: KRB5 ticket renewal
  cron:
    name: krb5 ticket
    minute: '1'
    hour: '*/6'
    job: 'kinit -k -t /home/{{ pulsar.user_name }}/user.keytab {{ pulsar.user_name }}@META'
    user: '{{ pulsar.user_name }}'

- name: KRB5 ticket creation on reboot
  cron:
    name: krb5 ticket on reboot
    special_time: reboot
    job: 'kinit -k -t /home/{{ pulsar.user_name }}/user.keytab {{ pulsar.user_name }}@META'
    user: '{{ pulsar.user_name }}'

- name: Check for Miniconda existence
  stat:
    path: "{{ miniconda_prefix }}/bin/conda"
  register: miniconda_exists
  become: yes
  become_user: "{{ pulsar.user_name }}"
- name: Download Miniconda installer
  ansible.builtin.get_url:
    url: "https://repo.anaconda.com/miniconda/Miniconda3-py39_{{ miniconda_version }}-1-Linux-x86_64.sh"
    dest: "/home/{{ pulsar.user_name }}/Miniconda3-py39_{{ miniconda_version }}-1-Linux-x86_64.sh"
  become: yes
  become_user: "{{ pulsar.user_name }}"
  when: not miniconda_exists.stat.exists and install_nfs_conda
- name: Install Miniconda to NFS home
  ansible.builtin.shell:
    cmd: "/bin/bash /home/{{ pulsar.user_name }}/Miniconda3-py39_{{ miniconda_version }}-1-Linux-x86_64.sh -b -p {{ miniconda_prefix }}"
  become: yes
  become_user: "{{ pulsar.user_name }}"
  when: not miniconda_exists.stat.exists and install_nfs_conda
- name: Ensure conda folder is executable
  ansible.builtin.file:
    path: "{{ miniconda_prefix }}/bin"
    state: directory
    recurse: yes
    mode: 'a+x'
  become: yes
  become_user: "{{ pulsar.user_name }}"
  when: install_nfs_conda
- name: Check for mamba bin
  stat:
    path: "{{ miniconda_prefix }}/bin/mamba"
  register: mamba_exists
  become: yes
  become_user: "{{ pulsar.user_name }}"
- name: Activate base env and install mamba
  ansible.builtin.command: "{{ miniconda_prefix }}/bin/conda install -y -c conda-forge mamba"
  become: yes
  become_user: "{{ pulsar.user_name }}"
  when: not mamba_exists.stat.exists and install_nfs_conda
- name: Ensure conda folder is executable again
  ansible.builtin.file:
    path: "{{ miniconda_prefix }}/bin"
    state: directory
    recurse: yes
    mode: 'a+x'
  become: yes
  become_user: "{{ pulsar.user_name }}"
  when: not mamba_exists.stat.exists and install_nfs_conda

